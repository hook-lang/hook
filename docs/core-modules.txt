
math:

  abs(num: number) -> number
  sin(num: number) -> number
  cos(num: number) -> number
  tan(num: number) -> number
  asin(num: number) -> number
  acos(num: number) -> number
  atan(num: number) -> number
  floor(num: number) -> int
  ceil(num: number) -> int
  round(num: number) -> int
  pow(base: number, power: number) -> number
  sqrt(num: number) -> number
  cbrt(num: number) -> number
  log(num: number) -> number
  log2(num: number) -> number
  log10(num: number) -> number
  exp(num: number) -> number
  random() -> number

os:

  CLOCKS_PER_SEC: number

  clock() -> int
  time() -> int
  system(cmd: string) -> int
  getenv(var: string) -> string
  name() -> string

io:

  stdin: userdata
  stdout: userdata
  stderr: userdata

  SEEK_SET: number
  SEEK_CUR: number
  SEEK_END: number

  open(filename: string, mode: string) -> nil|userdata
  close(stream: userdata) -> int
  popen(command: string, mode: string) -> nil|userdata
  pclose(stream: userdata) -> int
  eof(stream: userdata) -> bool
  flush(stream: userdata) -> int
  sync(stream: userdata) -> bool
  tell(stream: userdata) -> int
  rewind(stream: userdata)
  seek(stream: userdata, offset: int, whence: int) -> int
  read(stream: userdata, size: int) -> nil|string
  write(stream: userdata, str: string) -> nil|int
  readln(stream: userdata) -> string
  writeln(stream: userdata, str: string) -> nil|int

numbers:

  PI: number
  TAU: number
  LARGEST: number
  SMALLEST: number
  MAX_INTEGER: int
  MIN_INTEGER: int

strings:

  new_string(min_capacity: int) -> string
  hash(str: string) -> int
  lower(str: string) -> string
  upper(str: string) -> string
  trim(str: string) -> string
  starts_with(str1: string, str2: string) -> bool
  ends_with(str1: string, str2: string) -> bool
  reverse(str: string) -> string

arrays:

  new_array(min_capacity: int) -> array
  index_of(arr: array, elem: value) -> int
  min(arr: array) -> value
  max(arr: array) -> value
  sum(arr: array) -> number
  avg(arr: array) -> number
  reverse(arr: array) -> array
  sort(arr: array) -> array

utf8:

  len(str: string) -> int
  sub(str: string, start: int, end: int) -> string

regex:
  
  new(pattern: string) -> userdata
  find(regex: userdata, str: string) -> nil|array
  is_match(regex: userdata, str: string) -> bool

hashing:

  sha224(str: string) -> string
  sha256(str: string) -> string
  sha384(str: string) -> string
  sha512(str: string) -> string
  sha1(str: string) -> string
  sha3(str: string) -> string
  md5(str: string) -> string
  ripemd160(str: string) -> string

encoding:

  base32_encode(str: string) -> string
  base32_decode(str: string) -> string
  base58_encode(str: string) -> string
  base58_decode(str: string) -> string
  base64_encode(str: string) -> string
  base64_decode(str: string) -> string

socket:

  AF_INET: int
  AF_INET6: int
  SOCK_STREAM: int
  SOCK_DGRAM: int
  IPPROTO_TCP: int
  IPPROTO_UDP: int
  SOL_SOCKET: int
  SO_REUSEADDR: int

  new(domain: int, type: int, protocol: int) -> userdata
  close(sock: userdata)
  connect(sock: userdata, host: string, port: int)
  accept(sock: userdata) -> nil|userdata
  bind(sock: userdata, host: string, port: int)
  listen(sock: userdata, backlog: int)
  send(sock: userdata, str: string) -> int
  recv(sock: userdata, size: int) -> nil|string
  set_option(sock: userdata, level: int, option: int, value: int)
  get_option(sock: userdata, level: int, option: int) -> int
  set_block(sock: userdata)
  set_nonblock(sock: userdata)
