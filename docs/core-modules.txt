
math:

  abs(num: number) -> number
  sin(num: number) -> number
  cos(num: number) -> number
  tan(num: number) -> number
  asin(num: number) -> number
  acos(num: number) -> number
  atan(num: number) -> number
  floor(num: number) -> number
  ceil(num: number) -> number
  round(num: number) -> number
  pow(base: number, power: number) -> number
  sqrt(num: number) -> number
  cbrt(num: number) -> number
  log(num: number) -> number
  log2(num: number) -> number
  log10(num: number) -> number
  exp(num: number) -> number

os:

  CLOCKS_PER_SEC: number

  clock() -> number
  time() -> number
  system(cmd: string) -> number
  getenv(str: string) -> string
  getcwd() -> string
  name() -> string

io:

  stdin: userdata
  stdout: userdata
  stderr: userdata

  SEEK_SET: number
  SEEK_CUR: number
  SEEK_END: number

  open(filename: string, mode: string) -> nil|userdata
  close(stream: userdata) -> number
  popen(command: string, mode: string) -> nil|userdata
  pclose(stream: userdata) -> number
  eof(stream: userdata) -> bool
  flush(stream: userdata) -> number
  sync(stream: userdata) -> bool
  tell(stream: userdata) -> number
  rewind(stream: userdata)
  seek(stream: userdata, offset: number, whence: number) -> number
  read(stream: userdata, size: number) -> nil|string
  write(stream: userdata, str: string) -> nil|number
  readln(stream: userdata) -> string
  writeln(stream: userdata, str: string) -> nil|number

numbers:

  PI: number
  TAU: number
  LARGEST: number
  SMALLEST: number
  MAX_INTEGER: number
  MIN_INTEGER: number

  srand(seed: number)
  rand() -> number

strings:

  new_string(min_capacity: number) -> string
  repeat(str: string, count: number) -> string
  hash(str: string) -> number
  lower(str: string) -> string
  upper(str: string) -> string
  trim(str: string) -> string
  starts_with(str1: string, str2: string) -> bool
  ends_with(str1: string, str2: string) -> bool
  reverse(str: string) -> string

arrays:

  new_array(min_capacity: number) -> array
  fill(elem: any, length: number) -> array
  index_of(arr: array, elem) -> number
  min(arr: array) -> any
  max(arr: array) -> any
  sum(arr: array) -> number
  avg(arr: array) -> number
  reverse(arr: array) -> array
  sort(arr: array) -> array

utf8:

  len(str: string) -> number
  sub(str: string, start: number, end: number) -> string

regex:
  
  new(pattern: string) -> userdata
  find(regex: userdata, str: string) -> nil|array
  is_match(regex: userdata, str: string) -> bool

hashing:

  crc32(str: string) -> number
  crc64(str: string) -> number
  sha224(str: string) -> string
  sha256(str: string) -> string
  sha384(str: string) -> string
  sha512(str: string) -> string
  sha1(str: string) -> string
  sha3(str: string) -> string
  md5(str: string) -> string
  ripemd160(str: string) -> string

encoding:

  base32_encode(str: string) -> string
  base32_decode(str: string) -> string
  base58_encode(str: string) -> string
  base58_decode(str: string) -> string
  base64_encode(str: string) -> string
  base64_decode(str: string) -> string
  ascii85_encode(str: string) -> string
  ascii85_decode(str: string) -> string

socket:

  AF_INET: number
  AF_INET6: number
  SOCK_STREAM: number
  SOCK_DGRAM: number
  IPPROTO_TCP: number
  IPPROTO_UDP: number
  SOL_SOCKET: number
  SO_REUSEADDR: number

  new(domain: number, type: number, protocol: number) -> userdata
  close(sock: userdata)
  connect(sock: userdata, host: string, port: number)
  accept(sock: userdata) -> nil|userdata
  bind(sock: userdata, host: string, port: number)
  listen(sock: userdata, backlog: number)
  send(sock: userdata, str: string) -> number
  recv(sock: userdata, size: number) -> nil|string
  set_option(sock: userdata, level: number, option: number, value: number)
  get_option(sock: userdata, level: number, option: number) -> number
  set_block(sock: userdata)
  set_nonblock(sock: userdata)

json:

  encode(value: any) -> string
  decode(str: string) -> any

lists:

  new_linked_list() -> userdata
  len(list: userdata) -> number
  is_empty(list: userdata) -> bool
  push_front(list: userdata, value: any) -> userdata
  push_back(list: userdata, value: any) -> userdata
  pop_front(list: userdata) -> userdata
  pop_back(list: userdata) -> userdata
  front(list: userdata) -> any
  back(list: userdata) -> any
