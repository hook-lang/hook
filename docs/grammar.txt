
chunk       ::= stmt* EOF

stmt        ::= 'import' NAME ( 'as' NAME )? ';'
              | 'import' '{' NAME ( ',' NAME )* '}' 'from' NAME ';'
              | var_decl ';'
              | assign_call ';'
              | 'struct' NAME '{' ( STRING | NAME ( ',' STRING | NAME )* )? '}'
              | 'fn' NAME '(' ( 'mut'? NAME ( ',' 'mut'? NAME )* )? ')'
                ( '=>' expr | block )
              | 'del' NAME subscr* '[' expr ']' ';'
              | ( 'if' | 'if!' ) '(' expr ')' stmt ( 'else' stmt )?
              | 'match' '(' expr ')' '{' ( expr '=>' stmt )+ ( '_' '=>' stmt )? '}'
              | 'loop' stmt
              | ( 'while' | 'while!' ) '(' expr ')' stmt
              | 'do' stmt ( 'while' | 'while!' ) '(' expr ')' ';'
              | 'for' '(' var_decl | assign_call? ';' expr? ';' assign_call? ')' stmt
              | 'foreach' '(' NAME 'in' expr ')' stmt
              | 'continue' ';'
              | 'break' ';'
              | 'return' expr? ';'
              | block

var_decl    ::= 'let' NAME '=' expr
              | 'mut' NAME ( '=' expr )?
              | ( 'let' | 'mut' ) '[' '_' | NAME ( ',' '_' | NAME )* ']' '=' expr
              | ( 'let' | 'mut' ) '{' NAME ( ',' NAME )* '}' '=' expr

assign_call ::= NAME subscr* assign_op expr
              | NAME subscr* ( '++' | '--' )
              | NAME subscr* '[' ']' '=' expr
              | NAME subscr* subscr '=' expr
              | NAME ( subscr | call )* call

assign_op   ::= '=' | '|=' | '^=' | '&=' | '<<=' | '>>=' 
              | '+=' | '-=' | '*=' | '/=' | '~/=' | '%='

subscr      ::= '[' expr ']' | '.' NAME

call        ::= '(' ( expr ( ',' expr )* )? ')'

block       ::= '{' stmt* '}'

expr        ::= and_expr ( '||' and_expr )*

and_expr    ::= equal_expr ( '&&' equal_expr )*

equal_expr  ::= comp_expr ( ( '==' | '!=' ) comp_expr )*

comp_expr   ::= bor_expr ( ( '>' | '>=' | '<' | '<=' ) bor_expr )*

bor_expr    ::= bxor_expr ( '|' bxor_expr )*

bxor_expr   ::= band_expr ( '^' band_expr )*

band_expr   ::= shift_expr ( '&' shift_expr )*

shift_expr  ::= range_expr ( ( '<<' | '>>' ) range_expr )*

range_expr  ::= add_expr ( '..' add_expr )?

add_expr    ::= mul_expr ( ( '+' | '-' ) mul_expr )*

mul_expr    ::= unary_expr ( ( '*' | '/' | '~/' | '%' ) unary_expr )*

unary_expr  ::= ( '-' | '!' | '~' ) unary_expr | prim_expr

prim_expr   ::= 'nil' | 'false' | 'true' | INT | FLOAT | STRING
              | '[' ( expr ( ',' expr )* )? ']'
              | '{' ( STRING | NAME ':' expr ( ',' STRING | NAME ':' expr )* )? '}'
              | 'struct' '{' ( STRING | NAME ( ',' STRING | NAME )* )? '}'
              | '|' ( 'mut'? NAME ( ',' 'mut'? NAME )* )? '|' ( '=>' expr | block )
              | ( 'if' | 'if!' ) '(' expr ')' expr 'else' expr
              | 'match' '(' expr ')' '{' expr '=>' expr ( ',' expr '=>' expr )*
                ',' '_' '=>' expr '}'
              | NAME ( subscr | call )* ( '{' ( expr ( ',' expr )* )? '}' )?
              | '(' expr ')'
