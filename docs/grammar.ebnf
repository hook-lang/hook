
chunk                ::= stmt* EOF

stmt                 ::= import_stmt
                       | var_decl ';'
                       | assign_call ';'
                       | struct_decl
                       | fn_decl
                       | del_stmt
                       | if_stmt
                       | match_stmt
                       | loop_stmt
                       | while_stmt
                       | for_stmt
                       | break_stmt
                       | return_stmt
                       | block

import_stmt          ::= 'import' NAME ( 'as' NAME )? ';'
                       | 'import' STRING 'as' NAME ';'
                       | 'import' '{' NAME ( ',' NAME )* '}' 'from' ( NAME | STRING ) ';'

var_decl             ::= 'let' NAME '=' expr
                       | 'var' NAME ( '=' expr )?
                       | ( 'let' | 'var' ) '[' '_' | NAME ( ',' '_' | NAME )* ']' '=' expr
                       | ( 'let' | 'var' ) '{' NAME ( ',' NAME )* '}' '=' expr

assign_call          ::= NAME subsc* assign_op expr
                       | NAME subsc* ( '++' | '--' )
                       | NAME subsc* '[' ']' '=' expr
                       | NAME subsc* subsc '=' expr
                       | NAME ( subsc | call )* call

struct_decl          ::= 'struct' NAME '{' ( STRING | NAME ( ',' STRING | NAME )* )? '}'

fn_decl              ::= 'fn' NAME '(' params? ')' ( '=>' expr ";" | block )

params               ::= NAME ( ',' NAME )*

del_stmt             ::= 'del' NAME subsc* '[' expr ']' ';'

if_stmt              ::= ( 'if' | 'if!' ) '(' ( var_decl ';' )? expr ')'
                         stmt ( 'else' stmt )?

match_stmt           ::= 'match' '(' ( var_decl ';' )? expr ')'
                         '{' ( expr '=>' stmt )+ ( '_' '=>' stmt )? '}'

loop_stmt            ::= 'loop' stmt

while_stmt           ::= ( 'while' | 'while!' ) '(' expr ')' stmt
                       | 'do' stmt ( 'while' | 'while!' ) '(' expr ')' ';'

for_stmt             ::= 'for' '(' ( var_decl | assign_call )? ';' expr?
                         ';' assign_call? ')' stmt
                       | 'foreach' '(' NAME 'in' expr ')' stmt

break_stmt           ::= ( 'break' | 'continue' ) ';'

return_stmt          ::= 'return' expr? ';'

block                ::= '{' stmt* '}'

assign_op            ::= '=' | '|=' | '^=' | '&=' | '<<=' | '>>=' 
                       | '+=' | '-=' | '*=' | '/=' | '~/=' | '%='

subsc                ::= '[' expr ']' | '.' NAME

call                 ::= '(' ( expr ( ',' expr )* )? ')'

expr                 ::= and_expr ( '||' and_expr )*

and_expr             ::= equal_expr ( '&&' equal_expr )*

equal_expr           ::= comp_expr ( ( '==' | '!=' ) comp_expr )*

comp_expr            ::= bor_expr ( ( '>' | '>=' | '<' | '<=' ) bor_expr )*

bor_expr             ::= bxor_expr ( '|' bxor_expr )*

bxor_expr            ::= band_expr ( '^' band_expr )*

band_expr            ::= shift_expr ( '&' shift_expr )*

shift_expr           ::= range_expr ( ( '<<' | '>>' ) range_expr )*

range_expr           ::= add_expr ( '..' add_expr )?

add_expr             ::= mul_expr ( ( '+' | '-' ) mul_expr )*

mul_expr             ::= unary_expr ( ( '*' | '/' | '~/' | '%' ) unary_expr )*

unary_expr           ::= ( '-' | '!' | '~' ) unary_expr | primary_expr

primary_expr         ::= literal
                       | array_constructor
                       | struct_constructor
                       | anonymous_struct
                       | anonymous_fn
                       | if_expr
                       | match_expr
                       | subsc_call
                       | group_expr

literal              ::= 'nil' | 'false' | 'true' | NUMBER | STRING

array_constructor    ::= '[' ( expr ( ',' expr )* )? ']'

struct_constructor   ::= '{' ( STRING | NAME ':' expr ( ',' STRING | NAME ':' expr )* )? '}'

anonymous_struct     ::= 'struct' '{' ( STRING | NAME ( ',' STRING | NAME )* )? '}'

anonymous_fn         ::= '|' params? '|' ( '=>' expr | block )
                       | '||' ( '=>' expr | block )

if_expr              ::= ( 'if' | 'if!' ) '(' expr ')' expr 'else' expr

match_expr           ::= 'match' '(' expr ')' '{' expr '=>' expr ( ',' expr '=>' expr )*
                         ',' '_' '=>' expr '}'

subsc_call           ::= NAME ( subsc | call )* ( '{' ( expr ( ',' expr )* )? '}' )?

group_expr           ::= '(' expr ')'
